--- 
#---------------------------------------------# 
# MConnect - Centrul de Guvernare Electronica #
#---------------------------------------------#
    
  # Clean previous installation, if any
  #
  - name: Stop WSO2 resident services
    shell: ps -ef | grep -iv grep | grep {{ WSO2Owner }} | awk '{ print $2 }' | sudo xargs kill -9
    ignore_errors: true
    
  - name: Remove product folder
    file: path={{ WSO2ProductHome }} state=absent force=yes
    ignore_errors: true
    
  - name: Remove symlink
    file: path={{ WSO2CarbonHome }} state=absent force=yes
    ignore_errors: true
    
  - name: Remove startup service
    file: path=/etc/init.d/{{ WSO2Service }} state=absent force=yes
    ignore_errors: true
    
  # Clean previous installation, if any
  # 
  - name: Create directories
    file: path=/usr/lib/wso2server/dss/ state=directory
    file: path={{ WSO2FileRepository }} state=directory
    file: path={{ WSO2ProductHome }} state=directory
    
  #
  # Installation
  #
  - name: Creates product directory
    file: path={{ WSO2ProductHome }} state=directory owner={{ WSO2Owner }} group={{ WSO2Group }} recurse=yes
    
  - stat: path={{ WSO2FileRepository }}wso2dss-{{ WSO2ProductVersion }}.zip
    register: dss_arhive
    
  - name: Download DSS
    get_url: url=http://dist.wso2.org/products/data-services-server/{{ WSO2ProductVersion }}/wso2dss-{{ WSO2ProductVersion }}.zip dest={{ WSO2FileRepository }}
    when: dss_arhive.stat.exists is not defined
    
  - name: Unzip DSS
    unarchive: src={{ WSO2FileRepository }}wso2dss-{{ WSO2ProductVersion }}.zip dest={{ WSO2ProductHome }} copy=no
    
  - name: Create symbolic link
    file: src={{ WSO2ProductHome }}/wso2dss-{{ WSO2ProductVersion }} dest={{ WSO2CarbonHome }} owner={{ WSO2Owner }} group={{ WSO2Group }} state=link force=yes
    
  - name: Create startup service
    template: src=services/wso2server.j2 dest=/etc/init.d/{{ WSO2Service }} owner=root group=root mode=0755
    
  - name: Ensure WSO2 service is enabled for startup
    service: name={{ WSO2Service }} enabled=yes
    
  - name: Copy Oracle Server OJDBC driver
    copy: src=ojdbc7.jar dest={{ WSO2CarbonHome }}/repository/components/lib/  owner={{ WSO2Owner }} group={{ WSO2Group }} mode=0755
    when: driver == 'oracle' or driver == ''
    
  - name: Copy MySQL OJDBC driver
    copy: src=mysql-connector-java-5.1.38-bin.jar dest={{ WSO2CarbonHome }}/repository/components/lib/  owner={{ WSO2Owner }} group={{ WSO2Group }} mode=0755
    when: driver == 'mysql' or driver == ''
    
  - name: Copy Microsoft SQL OJDBC driver
    copy: src=sqljdbc42.jar dest={{ WSO2CarbonHome }}/repository/components/lib/  owner={{ WSO2Owner }} group={{ WSO2Group }} mode=0755
    when: driver == 'mssql' or driver == ''
  #
  # Configuration
  #
  - name: Change carbon file 
    template: src=conf/carbon.xml.j2 dest={{ WSO2CarbonHome }}/repository/conf/carbon.xml owner={{ WSO2Owner }} group={{ WSO2Group }} mode=0777
  #
  # Ownership
  #
  - name: Change WSO2 installation directory ownership
    shell: chown -R {{ WSO2Owner }}:{{ WSO2Group }} {{ WSO2Folder }}
    
  - name: Change WSO2 symlink directory ownership
    shell: chown {{ WSO2Owner }}:{{ WSO2Group }} {{ WSO2CarbonHome }}
  #
  # Firt startup
  #
  - name: Start WSO2 instance first time with -Dsetup
    command: bash -lc "su --preserve-environment {{ WSO2Owner }} -c 'cd {{ WSO2CarbonHome }}/ && bin/wso2server.sh --start -Dsetup'"
    
  - name: Wait for WSO2 to start for the first time
    wait_for: path={{ WSO2CarbonHome }}/repository/logs/wso2carbon.log search_regex=org.wso2.carbon.ui.internal.CarbonUIServiceComponent
    
  - name: Stop WSO2 setup
    command: bash -lc "su --preserve-environment {{ WSO2Owner }} -c 'cd {{ WSO2CarbonHome }}/ && bin/wso2server.sh --stop'"
    
  - name: Wait for WSO2 setup to completely stop
    wait_for: path={{ WSO2CarbonHome }}/repository/logs/wso2carbon.log search_regex=Halting
  #
  # Restart
  #
  - name: Restart server
    shell: reboot
    
  - name: Wait for server to come up
    local_action: wait_for host={% if ansible_ssh_host is defined %}{{ ansible_ssh_host }}{% else %}{{ inventory_hostname }}{% endif %} port=22 delay=30
    sudo: false
  #